# Consider all integer combinations of a**b for 2 ≤ a ≤ 5 and 2 ≤ b ≤ 5:

# 2**2=4, 2**3=8, 2 ... 5**4=625, 5**5=3125
# If they are then placed in numerical order, with any repeats removed, we get the following sequence of 15 distinct terms:

# 4, 8, 9, 16, 25, 27, 32, 64, 81, 125, 243, 256, 625, 1024, 3125
# How many distinct terms are in the sequence generated by ab for 2 ≤ a ≤ 100 and 2 ≤ b ≤ 100?
import logging

# logging.basicConfig(filename="sample.log", level=logging.INFO)
logging.basicConfig(level=logging.INFO)

class Problem029():

	def DistinctPowers(self, limit1, limit2):
		assert int(limit1) < int(limit2) , "Вводимые данные должны быть целыми числами и limit1 < limit2!!!"
		logger = logging.getLogger("DistinctPowers")
		logger.info('start')
		elevated = 0
		numb_arr = []
		for a in range(limit1, limit2+1):
			for b in range(limit1, limit2+1):
				elevated = a ** b
				numb_arr.append(elevated)
		# logger.info(str(numb_arr))
		numb_arr.sort()
		numb_arr_new = set(numb_arr)
		# logger.info(str(numb_arr_new))

		return len(numb_arr_new)

if __name__ == "__main__":
	n = Problem029()
	print(n.DistinctPowers(2, 100))