# The sequence of triangle numbers is generated by adding the natural numbers.
# So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28.
# The first ten terms would be:
# 1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...
# Let us list the factors of the first seven triangle numbers:
#  1: 1
#  3: 1,3
#  6: 1,2,3,6
# 10: 1,2,5,10
# 15: 1,3,5,15
# 21: 1,3,7,21
# 28: 1,2,4,7,14,28
# We can see that 28 is the first triangle number to have over five divisors.
# What is the value of the first triangle number to have over five hundred divisors?
class TriangleNumbers:

		# def ValueOfTriangleNumber(self, input_data):
		# 	assert 0 < int(input_data), "Вводимые данные должны быть числами больше 0 числами и целыми!!!"
		# 	numb = int(input_data)
		# 	nat_numb = 0
		# 	triangle_numb = 0
		# 	divisors = 0
		# 	for i in range(numb):
		# 		nat_numb += 1
		# 		triangle_numb += nat_numb
		# 		# print ("натуральное число: " + str(nat_numb))
		# 		print("треугольное число: " + str(triangle_numb))
		# 		for n in range(1, (triangle_numb + 1)):
		# 			divisors = triangle_numb / n
		# 			if triangle_numb % n == 0:
		# 				print("делитель: " + str(divisors))
		# 			# return divisors

		# def getDivisorsList(self, input_data):
		# 	# TODO :
		# 	assert 0 < int(input_data), "Вводимые данные должны быть числами больше 0 числами и целыми!!!"
		# 	triangle_numb = int(input_data)
		# 	to_return = []
		# 	#print("треугольное число: " + str(triangle_numb))
		# 	for n in range(1, (triangle_numb + 1)):
		# 		divisors = triangle_numb / n
		# 		if triangle_numb % n == 0:
		# 			#print("делитель: " + str(divisors))
		# 			to_return.append(divisors)
		# 	return to_return

		def getNumForDivCnt(self, input_data):
			assert 0 < int(input_data), "Вводимые данные должны быть числами больше 0 числами и целыми!!!"
			numb = int(input_data)
			nat_numb = 0
			triangle_numb = 0
			lim_divisors = 6
			divisors = 0
			while 1==1:
				nat_numb += 1
				triangle_numb += nat_numb
				# print ("натуральное число: " + str(nat_numb))
				#print("треугольное число: " + str(triangle_numb))
				div_List =[]
				for n in range(1, (triangle_numb + 1)):
					divisors = triangle_numb / n
					if triangle_numb % n == 0:
						div_List.append(divisors)
						#print("делитель: " + str(divisors))
				if len(div_List) == numb:
					# print("треугольное число: " + str(triangle_numb))
					# print(div_List)
					return triangle_numb, div_List



if __name__ == "__main__":
	n = TriangleNumbers()
	#print(n.ValueOfTriangleNumber(7))
	#print(n.getDivisorsList(28))
	print(n.getNumForDivCnt(6))
